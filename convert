#!/usr/bin/env python

import sys
import subprocess
import re
import os
import fractions

executables = ["ffprobe"]
extensions = ["mkv", "mp4", "avi"]
tmpPath = "tmp"
fpsTolerance = 0.001


def main(args):
  if len(args) != 2:
    print "usage:"
    cleanExit (1)
  
  for executable in executables:
    try:
      ffprobe = subprocess.Popen([executable], stdout = subprocess.PIPE,
        stderr = subprocess.PIPE)
    except OSError:
      print "Can't find " + executable + " execuatble"
      cleanExit(1)
  
  match = re.match("(.*)\.(" + "|".join(extensions) + ")",
    os.path.basename(args[1]))
  if not match:
    print "unrecognised extension"
    cleanExit(1)
  pathAbs = args[1]
  if not os.path.isabs(pathAbs):
    pathAbs = os.path.join(os.getcwd(), pathAbs)
  outputName = os.path.join(os.getcwd(), match.group(1)) + ".mp4"
  if os.path.normpath(pathAbs) == (outputName):
    outputName = os.path.join(os.getcwd(), match.group(1)) + "_converted.mp4"
  
  ffprobe = subprocess.Popen(
    "ffprobe -show_streams -print_format compact -select_streams v".split(' ') +
      [args[1]],
    stdout = subprocess.PIPE, stderr = subprocess.PIPE)
  stream = processCompactToAssoc(ffprobe)
  if stream is None:
    print "Error reading file"
    cleanExit(1)
  
  print getFfmpegAudioOption(args[1], stream)
   
#  for k, v in stream.iteritems():
#    print k + ': ' + v
  cleanExit(0)


def processCompactToAssoc(ps):
  lastLine = None
  for line in ps.stdout:
    lastLine = line
  if lastLine is None:
    return None
  else:
    return dict(tuple(pair.split('=')) for pair in lastLine.split('|')[1:])

def getFfmpegAudioOption(inputPath, stream):
  if stream['r_frame_rate'] != stream['avg_frame_rate']:
    print "frame rate error"
    exit (1)
  boldPrint("fps: " + stream["r_frame_rate"])
  fpsList = [int(n) for n in stream["r_frame_rate"].split('/')]
  fps = fractions.Fraction(fpsList[0], fpsList[1])
  print fps

def boldPrint(message):
  print "\x1b[1;37m" + message + "\x1b[0m"

def cleanExit(exitCode):
  try:
    os.removedirs(tmpPath)
  except OSError:
    pass
  exit(exitCode)


if __name__ == "__main__":
  main(sys.argv)

#frame rate tolerance
