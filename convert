#!/usr/bin/env python

import sys
import subprocess
import re
import os
import fractions
import xml.dom.minidom

executables = ["ffprobe", "mkvextract", "mkvinfo"]
extensions = ["mkv", "mp4", "avi"]
tmpPath = "tmp"
fpsTolerance = 0.001


def main(args):
  if len(args) != 2:
    boldPrint("usage:")
    cleanExit (1)
  
  for executable in executables:
    try:
      ffprobe = subprocess.Popen([executable], stdout = subprocess.PIPE,
        stderr = subprocess.PIPE)
    except OSError:
      boldPrint("Can't find " + executable + " execuatble")
      cleanExit(1)
  
  match = re.match("(.*)\.(" + "|".join(extensions) + ")",
    os.path.basename(args[1]))
  if not match:
    boldPrint("unrecognised extension")
    cleanExit(1)
  pathAbs = args[1]
  if not os.path.isabs(pathAbs):
    pathAbs = os.path.join(os.getcwd(), pathAbs)
  outputName = os.path.join(os.getcwd(), match.group(1)) + ".mp4"
  if os.path.normpath(pathAbs) == (outputName):
    outputName = os.path.join(os.getcwd(), match.group(1)) + "_converted.mp4"
  
  ffprobe = popen(
"ffprobe -show_streams -print_format compact -select_streams v".split(' ') +
    [args[1]])
  stream = processCompactToAssoc(ffprobe)
  if stream is None:
    boldPrint("Error reading file")
    cleanExit(1)
  
  print getFfmpegAudioOption(args[1], stream)
   
#  for k, v in stream.iteritems():
#    print k + ': ' + v
  cleanExit(0)


def processCompactToAssoc(ps):
  lastLine = None
  for line in ps.stdout:
    lastLine = line
  if lastLine is None:
    return None
  else:
    return dict(tuple(pair.split('=')) for pair in lastLine.split('|')[1:])

def getFfmpegAudioOption(inputPath, stream):
  if stream["r_frame_rate"] != stream["avg_frame_rate"]:
    boldPrint("frame rate error")
    exit (1)
  boldPrint("fps: " + stream["r_frame_rate"])
  fpsList = [int(n) for n in stream["r_frame_rate"].split('/')]
  fps = fractions.Fraction(fpsList[0], fpsList[1])
  if ((fps.numerator == 24000) and (fps.denominator == 1001)):
    boldPrint("exact NTSC frame rate detected")
  else:
    if (abs(float(fps) - (float(24000) / float(1001))) > fpsTolerance):
      boldPrint("frmae rate is not within acceptable range")
      exit (1)
    #cache?
    boldPrint(
      "Non-exact frame rate detected, counting frames and timestamps ...")
    ffprobe = popen(
"ffprobe -show_frames -print_format compact -select_streams v".split(' ') +
      [inputPath])
    frame = processCompactToAssoc(ffprobe)
    fps = float(frame["coded_picture_number"]) / float(frame["pkt_pts_time"])
  print fps
  
  if inputPath.split('.')[-1].lower() == 'mkv':
    mkvextract = popen("mkvextract chapters".split(' ') + [inputPath])
    chaptersXml, stderr = mkvextract.communicate()
    chaptersDom = xml.dom.minidom.parseString(chaptersXml)
    linked = chaptersDom.getElementsByTagName("ChapterSegmentUID")
    mkvRe = re.compile("\.mkv$")
    segmentUidRe = re.compile("Segment UID")
    if linked:
      segment = {}
      boldPrint("Linked")
      dir = os.path.dirname(inputPath)
      for file in os.listdir(dir):
        file = os.path.join(dir, file)
        if mkvRe.search(file) and os.path.isfile(file):
          mkvinfo = popen(["mkvinfo", file])
          for line in mkvinfo.stdout:
            if segmentUidRe.search(line):
              break
          segment[''.join([byte[2:4] for byte in line.split(':')[1]
            .strip().split(' ')])] = file
      print segment

def popen(argList, echo = False):
  return subprocess.Popen(argList, stdout = subprocess.PIPE,
    stderr = subprocess.PIPE)

def boldPrint(message):
  print "\x1b[1;37m" + message + "\x1b[0m"

def cleanExit(exitCode):
  try:
    os.removedirs(tmpPath)
  except OSError:
    pass
  exit(exitCode)


if __name__ == "__main__":
  main(sys.argv)
